language: julia
os:
  - linux
  - osx
julia:
  - 1.1
  - 1.4
  - nightly
codecov: true
jobs:
  allow_failures:
    - julia: nightly
  include:
    - stage: "Documentation"
      julia: 1.4
      os: linux
      before_install:
      - julia -e 'using Pkg; Pkg.add("Documenter")'
      script:
        - julia --project=docs/ -e 'using Pkg; Pkg.instantiate(); Pkg.develop(PackageSpec(path=pwd()))'
        - julia --project=docs/ docs/make.jl
      after_success: skip
# language: julia
# os:
#   - linux
# julia:
#   - 1.1
#   - nightly
# matrix:
#   allow_failures:
#     - julia: nightly
# cache:
#  directories:
#    - /home/travis/.julia
# sudo: false
# addons:
#   apt_packages:
#     - gfortran
#     - liblapack-dev
#     - libgmp-dev
#     - libglpk-dev
#
# before_install:
#     # don't keep an old version of the code in the cache
#  # - julia -e 'using Pkg; if "PowerModels" in keys(Pkg.installed()) Pkg.rm("PowerModels"); Pkg.rm("PowerModels"); Pkg.add("https://github.com/lanl-ansi/_PM.jl.git") end'
#  # - julia -e 'using Pkg; if "PowerModelsACDC" in keys(Pkg.installed()) Pkg.rm("PowerModelsACDC"); Pkg.rm("PowerModelsACDC") end'
#  # - julia -e 'using Pkg; Pkg.update()' #make sure we get the latest version of METADATA
# - julia -e 'using Pkg; Pkg.add("Ipopt")'
# - julia -e 'using Pkg; Pkg.add("SCS")'
# - julia -e 'using Pkg; Pkg.add("Documenter")'
# - julia -e 'using Pkg; Pkg.add("Juniper")'
# - julia -e 'using Pkg; Pkg.add("Cbc")'
#
# script:
#   - if [[ -a .git/shallow ]]; then git fetch --unshallow; fi
#  # - julia -e 'using Pkg; Pkg.clone(pwd())'
#   - julia -e 'using Pkg; Pkg.test("PowerModelsACDC")'
#
# after_success:
#   - julia -e 'using Pkg; cd(Pkg.dir("PowerModelsACDC")); include(joinpath("docs", "make.jl"))'
